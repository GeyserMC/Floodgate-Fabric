import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'java'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/floodgate.accesswidener")
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Base Floodgate
    implementation("org.geysermc.floodgate:core:${project.mod_version}")
    shadow("org.geysermc.floodgate:core:${project.mod_version}") {
        exclude group: "cloud.commandframework", module: "*" // Cloud is included jar-in-jar
        exclude group: "org.geysermc.floodgate", module: "api"
        exclude group: 'com.google.guava', module: "guava"
        exclude group: 'com.google.code.gson', module: "gson"
        exclude group: 'org.slf4j', module: "slf4j-api"
        exclude group: 'it.unimi.dsi.fastutil', module: "*"
    }

    shadow(implementation("org.geysermc.floodgate:api:${project.mod_version}")) {
        exclude group: 'com.google.guava', module: "guava"
        exclude group: 'com.google.code.gson', module: "gson"
        exclude group: "org.ow2.asm", module: "*" // From Events lib
    }

    // TODO: include cloud once we switch to 2.0
    modImplementation('cloud.commandframework:cloud-fabric:1.8.4') { transitive = false }
    shadow('cloud.commandframework:cloud-fabric:1.8.4') { transitive = false }
    implementation('cloud.commandframework:cloud-core:1.8.4') { transitive = false }
    shadow('cloud.commandframework:cloud-core:1.8.4') { transitive = false }
    implementation('cloud.commandframework:cloud-brigadier:1.8.4') { transitive = false }
    shadow('cloud.commandframework:cloud-brigadier:1.8.4') { transitive = false }
    implementation('cloud.commandframework:cloud-services:1.8.4') { transitive = false }
    shadow('cloud.commandframework:cloud-services:1.8.4') { transitive = false }

    include(modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT'))


    // Lombok
    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
}

repositories {
    //mavenLocal()

    // temporary for custom bStats fork
    maven {
        url 'https://jitpack.io'
    }

    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    // Standard OpenCollab repositories
    maven {
        name = 'opencollab-repo'
        url = 'https://repo.opencollab.dev/main/'
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

shadowJar {
    configurations = [project.configurations.shadow]
    // TODO this is temporary until Floodgate's dev branch is merged
    relocate("com.google.inject", "org.geysermc.floodgate.shadow.guice")
    relocate("org.bstats", "org.geysermc.floodgate.shadow.bstats")
    relocate("cloud.commandframework", "org.geysermc.floodgate.shadow.cloud")
    relocate("org.yaml.snakeyaml", "org.geysermc.floodgate.shadow.snakeyaml") //relocate snakeyaml to avoid conflicts with other mods
    exclude([
            'com/google/common/**', 'com/google/errorprone/**', 'com/google/gson/**', 'com/google/j2objc/**', 'com/google/thirdparty/**',
            'it/unimi/**',
            'org/slf4j/**',
            'org/objectweb/asm/**',
            'org/checkerframework/**',
            'jdk/internal/shellsupport/**',
            'edu/umd/cs/findbugs/**'
    ])
}

remapJar {
    dependsOn tasks.shadowJar
    mustRunAfter tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    addNestedDependencies = true
    archiveFileName.set("floodgate-fabric.jar")
}

tasks.register('remappedModrinthJar', RemapJarTask) {
    dependsOn tasks.remapJar
    input = tasks.remapJar.archiveFile
    addNestedDependencies = true
    setArchiveVersion("${project.mod_version}+build.${System.getenv("GITHUB_RUN_NUMBER")}")
}

tasks.assemble.dependsOn tasks.remapJar

artifacts {
    archives remapJar
    shadow shadowJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        mavenLocal()
    }
}

tasks.modrinth.dependsOn tasks.remappedModrinthJar

modrinth {
    token = System.getenv('MODRINTH_TOKEN') // Prevent GitHub Actions from caching empty Modrinth token
    projectId = "bWrNNfkb"
    versionNumber = project.version as String + "-" + System.getenv("GITHUB_RUN_NUMBER")
    versionType = "beta"
    changelog = "A changelog can be found at https://github.com/GeyserMC/Floodgate-Fabric/commits"

    syncBodyFrom = rootProject.file("README.md").text

    uploadFile = tasks.named("remappedModrinthJar")
    gameVersions.addAll("1.20.2", "1.20.4")

    loaders = ["fabric"]

    dependencies {
        required.project "fabric-api"
    }
}
